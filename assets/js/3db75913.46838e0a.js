"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[69],{396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var i=t(4848),s=t(8453);const a={title:"Scala",description:"Information on writing Chainless functions using Scala."},c="Scala Functions",l={id:"persistent-functions/jvm/scala",title:"Scala",description:"Information on writing Chainless functions using Scala.",source:"@site/docs/persistent-functions/jvm/scala.md",sourceDirName:"persistent-functions/jvm",slug:"/persistent-functions/jvm/scala",permalink:"/docs/persistent-functions/jvm/scala",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Scala",description:"Information on writing Chainless functions using Scala."},sidebar:"tutorialSidebar",previous:{title:"JVM Functions",permalink:"/docs/persistent-functions/jvm"},next:{title:"Data Models",permalink:"/docs/data-models"}},o={},r=[{value:"What you&#39;ll need",id:"what-youll-need",level:2},{value:"SBT",id:"sbt",level:2},{value:"<code>build.sbt</code>",id:"buildsbt",level:3},{value:"SBT Plugins",id:"sbt-plugins",level:2},{value:"<code>project/plugins.sbt</code>",id:"projectpluginssbt",level:3},{value:"Function Code",id:"function-code",level:2},{value:"<code>src/main/scala/MyFunction.scala</code>",id:"srcmainscalamyfunctionscala",level:3},{value:"Assemble and Upload",id:"assemble-and-upload",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"scala-functions",children:"Scala Functions"}),"\n",(0,i.jsx)(n.p,{children:"Persistent Functions can be written in Scala + SBT."}),"\n",(0,i.jsx)(n.h2,{id:"what-youll-need",children:"What you'll need"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.scala-sbt.org/download/",children:"SBT"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sbt",children:"SBT"}),"\n",(0,i.jsxs)(n.p,{children:["Your code files are structured like a normal SBT project, including a ",(0,i.jsx)(n.code,{children:"build.sbt"}),".  You can use either a single-module or multi-module project.  For simplicity, we describe a single-module project here."]}),"\n",(0,i.jsx)(n.h3,{id:"buildsbt",children:(0,i.jsx)(n.code,{children:"build.sbt"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sbt",children:'scalaVersion := "3.3.1"\nname := "chainless-function-example"\npublish / skip := true\nversion := "0.1.0"\nassembly / assemblyJarName := "function.jar"\nlibraryDependencies ++= Seq(\n    "org.typelevel" %% "cats-core" % "2.10.0",\n    "org.typelevel" %% "cats-effect" % "3.5.2",\n    "org.http4s" %% "http4s-ember-client" % "1.0.0-M40",\n    "org.http4s" %% "http4s-circe" % "1.0.0-M40",\n    "io.circe" %% "circe-core" % "0.14.6",\n    "io.circe" %% "circe-generic" % "0.14.6",\n    "io.circe" %% "circe-parser" % "0.14.6"\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["There are several items listed under ",(0,i.jsx)(n.code,{children:"libraryDependencies"}),".  These are not specifically required, but at minimum, you'll need an HTTP client in order to call the event API.  In this example, we use ",(0,i.jsx)(n.code,{children:"cats"})," as a general framework, ",(0,i.jsx)(n.code,{children:"http4s"})," to make API calls, and ",(0,i.jsx)(n.code,{children:"circe"})," to handle JSON."]}),"\n",(0,i.jsx)(n.h2,{id:"sbt-plugins",children:"SBT Plugins"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the normal build.sbt file, you will need to include an SBT plugin which can package up your project as a self-contained JAR."}),"\n",(0,i.jsx)(n.h3,{id:"projectpluginssbt",children:(0,i.jsx)(n.code,{children:"project/plugins.sbt"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sbt",children:'addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "2.1.5")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"function-code",children:"Function Code"}),"\n",(0,i.jsxs)(n.p,{children:["Next, write your function's ",(0,i.jsx)(n.code,{children:"main"})," method."]}),"\n",(0,i.jsx)(n.h3,{id:"srcmainscalamyfunctionscala",children:(0,i.jsx)(n.code,{children:"src/main/scala/MyFunction.scala"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.data.OptionT\nimport cats.effect.*\nimport cats.implicits.*\nimport io.circe.*\nimport io.circe.generic.semiauto.*\nimport io.circe.syntax.*\nimport org.http4s.*\nimport org.http4s.circe.*\nimport org.http4s.client.*\nimport org.http4s.ember.client.EmberClientBuilder\nimport org.typelevel.log4cats.LoggerFactory\nimport org.typelevel.log4cats.slf4j.Slf4jFactory\n\nobject BlockCounter extends IOApp.Simple {\n  private given LoggerFactory[IO] = Slf4jFactory.create[IO]\n\n  override def run: IO[Unit] =\n    EmberClientBuilder.default[IO].build.use(client =>\n      handleAllTasks(client)\n        .onError(throwable =>\n          submitError(client)(\n            throwable.getMessage + "\\n" + throwable.getStackTrace.mkString("\\n"))\n        )\n    )\n\n  def handleAllTasks(client: Client[IO]): IO[Unit] =\n    nextTask(client).semiflatMap(handleTask(client)).fold(().some)(_ => none).untilDefinedM\n\n  def nextTask(client: Client[IO]): OptionT[IO, Task] =\n    OptionT.liftF(\n        client.expect[String](\n          Request().withUri(Uri.unsafeFromString("/next"))\n        )\n      )\n      .filter(_.nonEmpty)\n      .semiflatMap(string => IO.fromEither(io.circe.parser.parse(string)))\n      .filterNot(_.isNull)\n      .semiflatMap(json => IO.fromEither(json.as[Task]))\n\n  def handleTask(client: Client[IO])(task: Task): IO[Unit] =\n    (task match {\n      case InitTask(config) => init(config)\n      case ApplyTask(blockWithMeta, functionState) => applyBlock(blockWithMeta, functionState)\n    })\n      .flatMap(newState => submitResult(client)(newState))\n\n  def submitResult(client: Client[IO])(state: Json): IO[Unit] =\n    client.expect[Unit](\n      Request()\n        .withUri(Uri.unsafeFromString("/success"))\n        .withMethod(Method.POST)\n        .withEntity(state)\n    )\n\n  def submitError(client: Client[IO])(error: String): IO[Unit] =\n    client.expect[Unit](\n      Request()\n        .withUri(Uri.unsafeFromString("/error"))\n        .withMethod(Method.POST)\n        .withEntity(error)\n    )\n\n  def init(config: Json): IO[Json] =\n    IO(Json.obj())\n\n  def applyBlock(blockWithMeta: BlockWithMeta, functionState: FunctionState): IO[Json] =\n    for {\n      currentState <- IO(functionState.state.as[Map[String, Long]]).rethrow\n      previousValue = currentState.getOrElse(blockWithMeta.meta.chain, 0L)\n      newState = currentState.asJsonObject.add(blockWithMeta.meta.chain, (previousValue + 1).asJson).toJson\n    } yield newState\n\n  given Codec[BlockMeta] = deriveCodec\n\n  given Codec[BlockWithMeta] = deriveCodec\n\n  given Codec[FunctionState] = deriveCodec\n\n  given Decoder[InitTask] = deriveDecoder\n\n  given Decoder[ApplyTask] = deriveDecoder\n\n  given Decoder[Task] = cursor =>\n    cursor.get[String]("taskType")\n      .flatMap {\n        case "init" => cursor.as[InitTask]\n        case "apply" => cursor.as[ApplyTask]\n      }\n\n}\n\ncase class FunctionState(chainStates: Map[String, String], state: Json)\n\ncase class BlockWithMeta(meta: BlockMeta, block: Json)\n\ncase class BlockMeta(chain: String, blockId: String, height: Long)\n\nsealed abstract class Task\n\ncase class InitTask(config: Json) extends Task\n\ncase class ApplyTask(blockWithChain: BlockWithMeta, stateWithChains: FunctionState) extends Task\n'})}),"\n",(0,i.jsx)(n.p,{children:"There are several model/class definitions and their corresponding encoders.  In the future, we hope to provide helper libraries to handle all of this for you.  Alternatively, you can just use work with raw JSON at the risk of losing type safety."}),"\n",(0,i.jsx)(n.h2,{id:"assemble-and-upload",children:"Assemble and Upload"}),"\n",(0,i.jsx)(n.p,{children:"Once your function is written, you can package the whole thing up into a self-contained JAR by running from the command line:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"sbt assembly\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Assuming a single-module SBT project, a JAR file will be produced at ",(0,i.jsx)(n.code,{children:"target/scala-3.3.1/function.jar"}),", but its path will also be printed to the console.  This JAR file can be uploaded to Chainless."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var i=t(6540);const s={},a=i.createContext(s);function c(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);